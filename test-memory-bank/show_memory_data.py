#!/usr/bin/env python3
"""
Show exactly what data is being passed to Memory Bank
"""

import os
from datetime import datetime

def show_memory_data():
    """Show the exact data format being sent to Memory Bank"""
    
    print("="*80)
    print("🔍 EXACT DATA BEING SENT TO MEMORY BANK")
    print("="*80)
    
    # Simulate current session data
    claude_session_id = "a649ac00-90d0-412b-a1d1-b13fa0414df3"
    project_name = os.path.basename(os.getcwd())
    timestamp = datetime.now().isoformat()
    
    # 1. PreToolUse data
    print("\n1. 📥 PRETOOLUSE DATA:")
    print("-" * 40)
    
    tool_name = "Edit"
    tool_input = {
        "file_path": "/home/kevlar/projects/toolstac.com/toolstac.com/test-memory-bank/test_context.py",
        "old_string": "print('old code')",
        "new_string": "print('new code')"
    }
    
    # This is what gets read from the Claude transcript
    transcript_snippet = """
**Human:** Show me exactly what data you are passing memory bank

**Assistant:** Great question! Let me show you exactly what data is being passed to Memory Bank
    """
    
    context_parts = [
        f"Project: {project_name}",
        f"Tool: {tool_name}",
        f"Time: {timestamp}",
        f"Edited file: {tool_input['file_path']}",
        f"Changed: {tool_input['old_string'][:100]}... → {tool_input['new_string'][:100]}...",
        f"Recent conversation: {transcript_snippet[-500:]}"
    ]
    
    context_summary = " | ".join(context_parts)
    
    print(f"📝 Context Summary ({len(context_summary)} chars):")
    print(f"   {context_summary}")
    print()
    
    # This becomes the user message
    user_message = f"Context: {context_summary}"
    print(f"💬 User Message sent to Vertex AI Agent:")
    print(f"   Role: 'user'")
    print(f"   Content: '{user_message}'")
    print()
    
    # Agent processes and responds
    print(f"🤖 Agent Response (generated by Vertex AI):")
    print(f"   Role: 'model'")
    print(f"   Content: 'I understand you're working on the {project_name} project and editing {os.path.basename(tool_input['file_path'])}...'")
    print()
    
    # 2. PostToolUse data
    print("2. 📤 POSTTOOLUSE DATA:")
    print("-" * 40)
    
    tool_output = "File edited successfully"
    success = True
    
    result_parts = [
        f"Project: {project_name}",
        f"Tool: {tool_name}",
        f"Success: {success}",
        f"Time: {timestamp}",
        f"Edited file: {tool_input['file_path']}",
        f"Edit completed successfully",
        f"Output: {tool_output}",
        f"Recent conversation: {transcript_snippet[-300:]}"
    ]
    
    result_summary = " | ".join(result_parts)
    
    print(f"📝 Result Summary ({len(result_summary)} chars):")
    print(f"   {result_summary}")
    print()
    
    user_message = f"Tool Result: {result_summary}"
    print(f"💬 User Message sent to Vertex AI Agent:")
    print(f"   Role: 'user'")
    print(f"   Content: '{user_message}'")
    print()
    
    print(f"🤖 Agent Response (generated by Vertex AI):")
    print(f"   Role: 'model'")
    print(f"   Content: 'The {tool_name} operation was successful. The file has been updated...'")
    print()
    
    # 3. Stop session data
    print("3. 🛑 STOP SESSION DATA:")
    print("-" * 40)
    
    full_transcript = transcript_snippet + """
**Assistant:** I'll create a debug script to show the exact data format.

**Human:** Perfect, show me the data structure.

**Assistant:** Here's the exact data being sent to Memory Bank...
    """
    
    lines = full_transcript.split('\n')
    user_messages = [l for l in lines if l.startswith('**Human:**')]
    assistant_messages = [l for l in lines if l.startswith('**Assistant:**')]
    
    session_parts = [
        f"Project: {project_name}",
        f"Session completed: {timestamp}",
        f"Session type: Complete conversation summary",
        f"User messages: {len(user_messages)}",
        f"Assistant messages: {len(assistant_messages)}",
        f"Total conversation length: {len(full_transcript)} chars",
        f"Full session: {full_transcript}"
    ]
    
    session_summary = " | ".join(session_parts)
    
    print(f"📝 Session Summary ({len(session_summary)} chars):")
    print(f"   {session_summary[:200]}...")
    print()
    
    user_message = f"Session Summary: {session_summary}"
    print(f"💬 User Message sent to Vertex AI Agent:")
    print(f"   Role: 'user'")
    print(f"   Content: '{user_message[:100]}...'")
    print()
    
    print(f"🤖 Agent Response (generated by Vertex AI):")
    print(f"   Role: 'model'")
    print(f"   Content: 'This conversation covered {len(user_messages)} user interactions about {project_name}...'")
    print()
    
    # 4. Memory Bank storage format
    print("4. 💾 MEMORY BANK STORAGE FORMAT:")
    print("-" * 40)
    
    print("Each hook creates a Session object with:")
    print("├── session_id: (generated by VertexAiSessionService)")
    print("├── app_name: 'claude-code'")
    print("├── user_id: 'a649ac00-90d0-412b-a1d1-b13fa0414df3'")
    print("└── conversation:")
    print("    ├── user_message: Content(parts=[Part(text='Context: ...')], role='user')")
    print("    └── agent_response: Content(parts=[Part(text='I understand...')], role='model')")
    print()
    
    print("Session.add_session_to_memory() stores:")
    print("├── Complete conversation (user + agent)")
    print("├── Metadata (timestamps, project info)")
    print("├── Searchable content (processed by agent)")
    print("└── Context relationships (for future searches)")
    print()
    
    print("="*80)
    print("🎯 KEY POINTS:")
    print("="*80)
    print("✅ Each hook creates REAL user/agent conversations")
    print("✅ Agent processes context into natural language")
    print("✅ Complete sessions stored in Memory Bank")
    print("✅ Content becomes searchable for future context injection")
    print("✅ Rich metadata included (project, timestamps, file paths)")
    print("✅ Claude session transcripts included for full context")
    print("="*80)

if __name__ == "__main__":
    show_memory_data()